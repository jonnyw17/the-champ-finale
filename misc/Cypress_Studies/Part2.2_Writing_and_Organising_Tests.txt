What You’ll Learn

 - How to organise your test and support files.
 - What languages are supported in your test files.
 - How Cypress handles unit tests vs integration tests.
 - How to group your tests.

Fixture Files
Fixtures are used as external pieces of static data that can be used by your tests.

You would typically use them with the cy.fixture() command and most often when you’re
stubbing Network Requests.

> Stub - he short part of something that is left after the main part has been used

Plugin Files
By default Cypress will automatically include the plugins file cypress/plugins/index.js
before every single spec file it runs. We do this purely as a convenience mechanism so
you don’t have to import this file in every single one of your spec files.

Support Files

The support file is a great place to put reusable behaviour such as Custom Commands or
global overrides that you want applied and available to all of your spec files.
From your support file you should also import or require other files to keep things
organised.

How to Write tests
Cypress is built on top of Mocha and Chai. We support both Chai’s BDD and TDD assertion
styles. Tests you write in Cypress will mostly adhere to this style.

If you’re familiar with writing tests in JavaScript, then writing tests in Cypress will
be a breeze.

Test Structure
Test interface borrowed from Mocha.

Hooks - from Mocha

describe('Hooks', function() {
  before(function() {
    // runs once before all tests in the block
  })

  after(function() {
    // runs once after all tests in the block
  })

  beforeEach(function() {
    // runs before each test in the block
  })

  afterEach(function() {
    // runs after each test in the block
  })
})

The order of hook and test execution is as follows:

 - All before() hooks run (once)
 - Any beforeEach() hooks run
 - Tests run
 - Any afterEach() hooks run
 - All after() hooks run (once)

! Before writing after() or afterEach() hooks, please see our thoughts on the anti-pattern
of cleaning up state with after() or afterEach().

As it is built on Mocha - the guide goes through, more of Mocha's features you can use in
Cypress.
