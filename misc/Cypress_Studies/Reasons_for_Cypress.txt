-------------------------------------------------------------------------------
Reasons for Cypress
-------------------------------------------------------------------------------

Pros

1. Instead of using promise based code for testing, Cypress looks much neater -
as a lot of implementation details of applying promises are hidden.
2. A lot of the code is more human readability for testability purposes
3. What makes Cypress unique from other testing tools is that
commands automatically retry their assertions. In fact, they
will look “downstream” at what you’re expressing and modify
their behaviour to make your assertions pass.

You should think of assertions as guards.

Use your guards to describe what your application should
look like, and Cypress will automatically block, wait, and
retry until it reaches that state.


Cons

1. Code must idempotent - the code must be retry safe
2. There is a performance tradeoff here: tests that have longer timeout periods
take longer to fail.

Grey Area

1. Cypress cannot yield you primitive values isolated away from other
commands. That is because Cypress commands act internally like an
asynchronous stream of data that only resolve after being affected
and modified by other commands. This means we cannot yield you
discrete values in chunks because we have to know everything about
what you expect before handing off a value.

These design patterns ensure we can create deterministic,
repeatable, consistent tests that are flake free.


-------------------------------------------------------------------------------
Reasons for Automated Testing
-------------------------------------------------------------------------------

Pros

Whilst you are doing something else, you can run all these tests in the
background - it sometimes feel like you are doing 2 things at once.


Notes

>Where to use Cypress Tests on
You want to use Cypress on testing something you control, rather than
on another webpage; changes to that webpage, would usually mean you'd
need to rewrite a lot of those tests again.

>Problems: Conditional Testing - may even be considered an anti-pattern
Without question, you want your tests to work 100% of the time, that
would require a single source of immutable truth - this is what makes
conditional testing difficult, thus all your tests must be deterministic.

The problem with conditional testing is that it can only be used when
the state has stabilized. In modern day applications, knowing when
state is stable is oftentimes impossible - the DOM is unstable.

To a human - if something changes 10ms or 100ms from now, we may not
even notice this change and assume the state was always the same.

To a robot - even 10ms represents billions+ of clock cycles. The
timescale difference is incredible.

A human also has intuition. If you click a button and see a loading
spinner, you will assume the state is in flux and will automatically
wait for it to finish.

A robot has no intuition - it will do exactly as it is programmed
to do.

When you can perform conditional testing?
If it's required
The only way to do conditional testing on the DOM is if you are 100%
sure that the state has “settled” and there is no possible way for
it to change.

That is it! In any other circumstance you will have flaky tests if
you try to rely on the state of the DOM for conditional testing.
