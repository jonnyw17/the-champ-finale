Introduction to Cypress

What You’ll Learn

 - How Cypress queries the DOM
 - How Cypress manages subjects and chains of commands
 - What assertions look like and how they work
 - How timeouts are applied to commands


Cypress bundles jQuery and exposes many of its DOM traversal methods
to you so you can work with complex HTML structures with ease.


Core Concept
Cypress leverages jQuery’s powerful selector engine to help make tests
familiar and readable for modern web developers.

Q) What happens when Cypress can’t find any matching DOM elements from
its selector?

A) No big deal! Cypress automatically retries the query until either:

1. The element is found
2. A set timeout is reached

This makes Cypress robust and immune to dozens of common problems that
occur in other testing tools. Consider all the circumstances that could
cause querying a DOM element to fail:

 - The DOM has not loaded yet.
 - Your framework hasn’t finished bootstrapping.
 - An XHR request hasn’t responded.
 - An animation hasn’t completed.

No need to write many custom code to protect against any and all of these
issues


Core Concept
Cypress wraps all DOM queries with robust retry-and-timeout logic that
better suits how real web apps work. We trade a minor change in how we find
DOM elements for a major stability upgrade to all of our tests.
Banishing flake for good!

These Commands will list a timeout option in their API documentation,
detailing how to set the number of milliseconds you want to continue to try
finding the element.

// Give this element 10 seconds to appear
cy.get('.my-slow-selector', { timeout: 10000 })


Core Concept
To match the behavior of web applications, Cypress is asynchronous and relies
on timeouts to know when to stop waiting on an app to get into the expected
state. Timeouts can be configured globally, or on a per-command basis.


Timeouts and Performance
There is a performance tradeoff here: tests that have longer timeout periods
take longer to fail. Commands always proceed as soon as their expected criteria
is met, so working tests will be performed as fast as your application allows.
A test that fails due to timeout will consume the entire timeout period, by
design. This means that while you may want to increase your timeout period to
suit specific parts of your app, you don’t want to make it “extra long, just in
case”.


Chains of Command
It’s very important to understand the mechanism Cypress uses to chain commands
together. It manages a Promise chain on your behalf, with each command yielding
a subject to the next command, until the chain ends or an error is encountered.
The developer should not need to use Promises directly, but understanding how
they work is helpful!

Interacting with Elements - list of ways to interact with elements
https://docs.cypress.io/guides/core-concepts/introduction-to-cypress.html#Interacting-With-Elements

Cypress ensures that the element is able to be interacted with (like a real user
would). It will automatically wait until the element reaches an “actionable” state
by:

 - Not being hidden
 - Not being covered
 - Not being disabled
 - Not animating


Asserting about Elements
Assertions are just commands that enable you to describe the desired state of
your application.
Assertions let you do things like ensuring an element is visible or has a
particular attribute, CSS class, or state.
Here’s a quick look at assertions in action:

cy.get(':checkbox').should('be.disabled')

cy.get('form').should('have.class', 'form-horizontal')

cy.get('input').should('not.have.value', 'US')


Subject Management
Some methods yield null and thus cannot be chained, such as cy.clearCookies()
or cy.screenshot().

Some methods, such as cy.get() or cy.contains(), yield a DOM element, allowing
further commands to be chained onto them (assuming they expect a DOM subject)
like .click() or even cy.contains() again.

> Check what each cy.[command] yields, before deciding to chain.

Core Concept
Cypress commands do not return their subjects, they yield them. Remember:
Cypress commands are asynchronous and get queued for execution at a later
time. During execution, subjects are yielded from one command to the next, and
a lot of helpful Cypress code runs between each command to ensure everything
is in order.

To work around the need to reference elements, Cypress has a feature known as
aliasing. Aliasing helps you to store and save element references for future
use.


Using .then() To Act On A Subject
Want to jump into the command flow and get your hands on the subject directly?
No problem, simply add a .then() to your command chain. When the previous
command resolves, it will call your callback function with the yielded subject
as the first argument.

Let’s look at an example:

cy
  // Find the el with id 'some-link'
  .get('#some-link')

  .then(($myElement) => {
    // ...massage the subject with some arbitrary code

    // grab its href property
    const href = $myElement.prop('href')

    // strip out the 'hash' character and everything after it
    return href.replace(/(#.*)/, '')
  })
  .then((href) => {
    // href is now the new subject
    // which we can work with now
  })


Using Aliases to Refer to Previous Subjects

Cypress has some added functionality for quickly referring back
to past subjects called Aliases. It looks something like this:

cy
  .get('.my-selector')
  .as('myElement') // sets the alias
  .click()

/* many more actions */

cy
  .get('@myElement') // re-queries the DOM as before (only if necessary)
  .click()


Commands Are Asynchronous
It is very important to understand that Cypress commands don’t do
anything at the moment they are invoked, but rather enqueue themselves
to be run later. This is what we mean when we say Cypress commands are
asynchronous.

Take this simple test, for example:

it('changes the URL when "awesome" is clicked', function() {
  cy.visit('/my/resource/path') // Nothing happens yet

  cy.get('.awesome-selector')   // Still nothing happening
    .click()                    // Nope, nothing

  cy.url()                      // Nothing to see, yet
    .should('include', '/my/resource/path#awesomeness') // Nada.
})

// Ok, the test function has finished executing...
// We've queued all of these commands and now
// Cypress will begin running them in order!

Cypress doesn’t kick off the browser automation magic until the test
function exits.

Core Concept
Each Cypress command (and chain of commands) returns immediately, having
only been appended to a queue of commands to be executed at a later time.

You purposefully cannot do anything useful with the return value from a
command. Commands are enqueued and managed entirely behind the scenes.

We’ve designed our API this way because the DOM is a highly mutable object
that constantly goes stale. For Cypress to prevent flake, and know when to
proceed, we manage commands in a highly controlled deterministic way.

Why can't I use async / await?
If you’re a modern JS programmer you might hear “asynchronous” and think:
why can’t I just use async/await instead of learning some proprietary API?

Cypress’s APIs are built very differently from what you’re likely used to:
but these design patterns are incredibly intentional. We’ll go into more
detail later in this guide.

serially - in a series or sequence.

Commands Run Serially
After a test function is finished running, Cypress goes to work executing
the commands that were enqueued using the cy.* command chains. The test
above would cause an execution in this order:

  1. Visit a URL.
  2. Find an element by its selector.
  3. Perform a click action on that element.
  4. Grab the URL.
  5. Assert the URL to include a specific string.
  6. These actions will always happen serially (one after the other),
  never in parallel (at the same time). Why?

Core Concept
Any waiting or retrying that is necessary to ensure a step was successful
must complete before the next step begins. If they don’t complete
successfully before the timeout is reached, the test will fail.

Commands Are Promises
How Cypress really looks, Promises wrapped up and hidden from us.

it('changes the URL when "awesome" is clicked', function() {
  cy.visit('/my/resource/path')

  cy.get('.awesome-selector')
    .click()

  cy.url()
    .should('include', '/my/resource/path#awesomeness')
})

Big difference! In addition to reading much cleaner, Cypress does
more than this, because Promises themselves have no concepts of
retry-ability.

Without retry-ability, assertions would randomly fail. This would
lead to flaky inconsistent results. This is also why we cannot use
new JS features like async / await.

Cypress cannot yield you primitive values isolated away from other
commands. That is because Cypress commands act internally like an
asynchronous stream of data that only resolve after being affected
and modified by other commands. This means we cannot yield you
discrete values in chunks because we have to know everything about
what you expect before handing off a value.

These design patterns ensure we can create deterministic,
repeatable, consistent tests that are flake free.

Commands Are Not Promises
The Cypress API is not an exact 1:1 implementation of Promises.
They have Promise like qualities and yet there are important
differences you should be aware of.

You cannot race or run multiple commands at the same time (in
parallel).
You cannot ‘accidentally’ forget to return or chain a command.
You cannot add a .catch error handler to a failed command.

Assertions
As we mentioned previously in this guide:

Assertions describe the desired state of your elements, your
objects, and your application.

What makes Cypress unique from other testing tools is that
commands automatically retry their assertions. In fact, they
will look “downstream” at what you’re expressing and modify
their behavior to make your assertions pass.

You should think of assertions as guards.

Use your guards to describe what your application should
look like, and Cypress will automatically block, wait, and
retry until it reaches that state.

Each API Command documents its behavior with assertions -
such as how it retries or waits for assertions to pass.

Let’s look at how you’d describe an assertion in english:

After clicking on this <button>, I expect its class to eventually be active.

To express this in Cypress you’d write:

cy
  .get('button')
  .click()
  .should('have.class', 'active')


Here’s another example.
After making an HTTP request to my server, I expect the response body to
equal {name: 'Jane'}
To express this with an assertion you’d write:

cy
  .request('/users/1')
  .its('body')
  .should('deep.eq', {name: 'Jane'})

When To Assert?
Despite the dozens of assertions Cypress makes available to you, sometimes
the best test may make no assertions at all! How can this be? Aren’t
assertions a basic part of testing?

With Cypress, you don’t have to assert to have a useful test. Even without
assertions, a few lines of Cypress can ensure thousands of lines of code
are working properly across the client and server!

This is because many commands have a built in Default Assertion which
offer you a high level of guarantee.

Default Assertions
Many commands have a default, built-in assertion, or rather have
requirements that may cause it to fail without needing an explicit
assertion you’ve added.

For instance:

  cy.visit() expects the page to send text/html content with a 200 status code.
  cy.request() expects the remote server to exist and provide a response.
  cy.contains() expects the element with content to eventually exist in the DOM.
  cy.get() expects the element to eventually exist in the DOM.
  .find() also expects the element to eventually exist in the DOM.
  .type() expects the element to eventually be in a typeable state.
  .click() expects the element to eventually be in an actionable state.
  .its() expects to eventually find a property on the current subject.
  Certain commands may have a specific requirement that causes them to
  immediately fail without retrying: such as cy.request().

Others, such as DOM based commands will automatically retry and wait for their
corresponding elements to exist before failing.

Even more - action commands will automatically wait for their element to reach
an actionable state before failing.

Core Concept
All DOM based commands automatically wait for their elements to exist in the DOM.
You never need to write .should('exist') after a DOM based command.

Example #1: Existence and Actionability

cy
  // there is a default assertion that this
  // button must exist in the DOM before proceeding
  .get('button')

  // before issuing the click, this button must be "actionable"
  // it cannot be disabled, covered, or hidden from view.
  .click()
Cypress will automatically wait for elements to pass their default assertions.
Just like with explicit assertions you’ve added, all of these assertions share
the same timeout values.

Example #2: Reversing the Default Assertion

Most of the time, when querying for elements you expect them to eventually
exist. But sometimes you wish to wait until they don’t exist.

All you have to do is add that assertion and Cypress will reverse its rules
waiting for elements to exist.

// now Cypress will wait until this
// <button> is not in the DOM after the click
cy.get('button.close').click().should('not.exist')

// and now make sure this #modal does not exist in the DOM
// and automatically wait until it's gone!
cy.get('#modal').should('not.exist')

Core Concept
By adding .should('not.exist') to any DOM command, Cypress will reverse its
default assertion and automatically wait until the element does not exist.

Example #3: Other Default Assertions

Other commands have other default assertions not related to the DOM.

For instance .its() requires that the property you’re asking about exists on the object.

// create an empty object
const obj = {}

// set the 'foo' property after 1 second
setTimeout(() => {
  obj.foo = 'bar'
}, 1000)

// .its() will wait until the 'foo' property is on the object
cy.wrap(obj).its('foo')

Cypress Assertion Libraries
Cypress bundles Chai, Chai-jQuery, and Sinon-Chai to provide built-in assertions.
Writing Assertions


There are two ways to write assertions in Cypress:

Implicit Subjects: Using .should() or .and().
Explicit Subjects: Using expect.
- https://docs.cypress.io/guides/references/assertions.html#Chai


Writing Assertions
There are two ways to write assertions in Cypress:

Implicit Subjects: Using .should() or .and().
Explicit Subjects: Using expect.

Beware: Assertions That Change The Subject
Some assertions modify the current subject unexpectedly. For example,
cy.get('a').should('have.attr', 'href', '/users') modifies the
subject from the <a> element to the string '/users'.

This is because Cypress honors the return value of the assertion, and
have.attr is a Chai-jQuery assertion that returns the matched string
instead of the original subject. This can be surprising!

Whenever you have failing assertions and don’t understand why, click
the command in the Cypress Command Log. Cypress will print details to
the browser console to help you troubleshoot what is going on.

If we wrote this assertion in the explicit form “the long way”, it
would look like this:

cy.get('tbody tr:first').should(($tr) => {
  expect($tr).to.have.class('active')
  expect($tr).to.have.attr('href', '/users')
})
The implicit form is much shorter! So when would you want to use the
explicit form?

Typically when you want to:

Assert multiple things about the same subject
Massage the subject in some way prior to making the assertion

Unit Tests
Did you know you can write Unit Tests in Cypress?
Check out our example recipes for unit testing and unit testing React components

Complex Assertions
The example below is a use case where we are asserting across multiple elements.
Using a .should() callback function is a great way to query from a parent into
multiple children elements and assert something about their state.

Doing so enables you to block and guard Cypress by ensuring the state of
descendants matches what you expect without needing to query them individually
with regular Cypress DOM commands.

cy
  .get("p")
  .should(($p) =>{
    // massage our subject from a DOM element
    // into an array of texts from all of the p's
    var texts = $p.map((i, el) => {
      return Cypress.$(el).text()
    })

    // jquery map returns jquery object
    // and .get() converts this to a simple array
    var texts = texts.get()

    // array should have length of 3
    expect(texts).to.have.length(3)

    // with this specific content
    expect(texts).to.deep.eq([
      'Some text from first p',
      'More text from second p',
      'And even more text from third p'
    ])
})



Make sure `.should()` is safe
When using a callback function with .should(), be sure that the entire function
can be executed multiple times without side effects. Cypress applies its retry
logic to these functions: if there’s a failure, it will repeatedly rerun the
assertions until the timeout is reached. That means your code should be retry-safe.
The technical term for this means your code must be idempotent.

Timeouts
Almost all commands can time out in some way.

All assertions, whether they’re the default ones or whether they’ve been added by
you all share the same timeout values.

Applying Timeouts
You can modify a command’s timeout. This timeout affects both its default assertions
(if any) and any specific assertions you’ve added.

Remember because assertions are used to describe a condition of the previous commands
 - the timeout modification goes on the previous commands not the assertions.

 Example #2: Additional Assertions

 // we've added 2 assertions to our test
 cy
   .get('.mobile-nav')
   .should('be.visible')
   .and('contain', 'Home')
 Under the hood Cypress:

 Queries for the element .mobile-nav
 ✨and waits up to 4 seconds for it to exist in the DOM✨
 ✨and waits up to 4 seconds for it to be visible✨
 ✨and waits up to 4 seconds for it to contain the text: ‘Home’✨

 Timeouts can be modified per command and this will affect all default assertions and any assertions chained after that command.

Example #3: Modifying Timeouts

// we've modified the timeout which affects default + added assertions
cy
  .get('.mobile-nav', { timeout: 10000 })
  .should('be.visible')
  .and('contain', 'Home')
Under the hood Cypress:

Gets the element .mobile-nav
✨and waits up to 10 seconds for it to exist in the DOM✨
✨and waits up to 10 seconds for it to be visible✨
✨and waits up to 10 seconds for it to contain the text: ‘Home’✨

Default values you can see in config.
