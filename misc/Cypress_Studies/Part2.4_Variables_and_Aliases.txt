What You’ll Learn

How to deal with async commands

 - What Aliases are, how they simplify your code
 - Why you rarely need to use variables with Cypress
 - How to use Aliases for objects, elements and routes

Return values
Asynchronous API’s are here to stay in JavaScript. They are found
everywhere in modern code. In fact, most new browser API’s are
asynchronous and many core Node.js are asynchronous as well.

!Warning : You cannot assign or work with the return values of any
Cypress command. Commands are are enqueued and run asynchronously.

// ...this won't work...

// nope
const button = cy.get('button')

// nope
const form = cy.get('form')

// nope
button.click()

Closures
If you’re familiar with native Promises - the Cypress .then() works the
same way. You can continue to nest more Cypress commands inside of the
.then().

Each nested command has access to the work done in previous commands.
This ends up reading very nicely.

cy.get('button').then(($btn) => {

  // store the button's text
  const txt = $btn.text()

  // submit a form
  cy.get('form').submit()

  // compare the two buttons' text
  // and make sure they are different
  cy.get('button').should(($btn2) => {
    expect($btn2.text()).not.to.eq(txt)
  })
})

// these commands run after all of the
// other previous commands have finished
cy.get(...).find(...).should(...)

By using callback functions, we’ve created a closure.
Closures enable us to keep references around to refer to work done
in previous commands.
-> Does that mean refering back to Aliases??


Debugging
Using .then() functions is an excellent opportunity to use debugger. This can help you understand the order in which commands are run. This also enables you to inspect the objects that Cypress yields you in each command.

cy.get('button').then(($btn) => {
  // inspect $btn <object>
  debugger

  cy.get('#countries').select('USA').then(($select) => {
    // inspect $select <object>
    debugger

    cy.url().should((url) => {
      // inspect the url <string>
      debugger

      $btn    // is still available
      $select // is still available too

    })
  })
})

Variables
Typically in Cypress - you hardly need to ever use const, let, or var.
When using closures - you’ll always have access to the objects that
were yielded to you without assigning them.

The one exception to this rule is when you are dealing with mutable
objects (that change state). When things change state, you often want
to compare an object’s previous value to the next value.


Aliases
Aliases are a powerful construct in Cypress that have many uses.

Used for accessing previous commands.

We’ll explore each of their capabilities below.

At first, we’ll use them to make it easy to share objects between your
hooks and your tests.

Sharing Context
Sharing context is simplest way to use aliases.

To alias something you’d like to share - you use the command called:
.as().

Under the hood, aliasing basic objects and primitives utilizes mocha’s shared context object. That is - aliases are available as this.*.

Mocha automatically shares contexts for us across all applicable hooks for each test. Additionally these aliases and properties are automatically cleaned up after each test.

describe('parent', function () {
  beforeEach(function () {
    cy.wrap('one').as('a')
  })

  context('child', function () {
    beforeEach(function () {
      cy.wrap('two').as('b')
    })

    describe('grandchild', function () {
      beforeEach(function () {
        cy.wrap('three').as('c')
      })

      it('can access all aliases as properties', function () {
        expect(this.a).to.eq('one') // true
        expect(this.b).to.eq('two') // true
        expect(this.c).to.eq('three') // true
      })
    })
  })
})


Accessing Fixtures
The most common use case for sharing context is when dealing with
cy.fixture().

Often times you may load in a fixture in a beforeEach hook but want to
utilize the values in your tests.

beforeEach(function () {
  // alias the users fixtures
  cy.fixture('users.json').as('users')
})

it('utilize users in some way', function () {
  // access the users property
  const user = this.users[0]

  // make sure the header contains the first
  // users name
  cy.get('header').should('contain', user.name)
})

!Warning: Watch out for async commands
Do not forget that Cypress commands are async!
You cannot use a this.* reference until the .as() command runs.

it('is not using aliases correctly', function () {
  cy.fixture('users.json').as('users')

  // nope this won't work
  //
  // this.users is not defined
  // because the 'as' command has only
  // been enqueued - it has not run yet
  const user = this.users[0]
})

The same principles we introduced many times before apply to this situation. If you want to access what a command yields, you’ll have to do it in a closure using a .then().

// yup all good
cy.fixture('users.json').then((users) => {
  // now we can avoid the alias altogether
  // and just use a callback function
  const user = users[0]

  // passes
  cy.get('header').should('contain', user.name)
})
Avoiding the use of this

Arrow Functions
Accessing aliases as properties with this.* will not work if you use “arrow functions” for your tests or hooks.

This is why you’ll notice all of our examples use the regular function () {} syntax as opposed to the lambda fat arrow syntax () => {}.

Instead of using the this.* syntax, there is another way to access aliases.

The cy.get() command is capable of accessing aliases with a special syntax using the ‘@’ character:

beforeEach(function () {
  // alias the users fixtures
  cy.fixture('users.json').as('users')
})

it('utilize users in some way', function () {
  // use the special '@' syntax to access aliases
  // which avoids the use of 'this'
  cy.get('@users').then((users) => {
    // access the users argument
    const user = users[0]

    // make sure the header contains the first
    // users name
    cy.get('header').should('contain', user.name)
  })
})
By using cy.get() we avoid the use of this.
But just keep in mind - there are use cases for both approaches because they have different ergonomics.
When using this.users we have access to it synchronously, whereas when using cy.get('@users') it becomes an asynchronous command.
You can think of the cy.get('@users') as doing the same thing as cy.wrap(this.users).



Elements
Stale Elements:

In many single-page JavaScript applications, the DOM re-renders parts
of the application constantly. If you alias DOM elements that have
been removed from the DOM by the time you call cy.get() with the alias,
Cypress automatically re-queries the DOM to find these elements again.

Usually, replaying previous commands will return what you expect, but
not always. It is recommended that you alias elements as soon as
possible instead of further down a chain of commands.

cy.get('#nav header .user').as('user')  (good)
cy.get('#nav').find('header').find('.user').as('user')  (bad)
When in doubt, you can always issue a regular cy.get() to query for
the elements again.

Routes
Aliases can also be used with routes. Aliasing your routes enables you
to:

ensure your application makes the intended requests
wait for your server to send the response
access the actual XHR object for assertions
alias-commands

Here’s an example of aliasing a route and waiting on it to complete.

cy.server()
cy.route("POST", /users/, { id: 123 }).as("postUser")

cy.get('form').submit()

cy.wait('@postUser').its('requestBody').should('have.property',
'name', 'Brian')

cy.contains('Successfully created user: Brian')
